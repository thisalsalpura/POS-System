/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import com.formdev.flatlaf.FlatClientProperties;
import java.awt.Window;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import model.LoggerUtils;
import model.MySQL;
import raven.toast.Notifications;

/**
 *
 * @author User
 */
public class Employee_Address extends javax.swing.JFrame {

    private static HashMap<String, Integer> cityMap = new HashMap<>();
    private static Employee_Registration register = new Employee_Registration();
    private static Home home = new Home();
    private static SignIn signIn = new SignIn();
    private Window parentWindow;
    private Employee_Registration_Panel registerPanel;
    private int AddOrUpdate;
    private String email;
    private static Logger logger = LoggerUtils.getLogger();

    /**
     * Creates new form Employee_Address
     */
    public Employee_Address(Window parentWindow, Employee_Registration_Panel registerPanel, int AddOrUpdate, String email) {
        this.parentWindow = parentWindow;
        this.registerPanel = registerPanel;
        this.AddOrUpdate = AddOrUpdate;
        this.email = email;
        initComponents();
        init();
        loadCities();
        emp_email.setText(this.email + " ");

        // set notification position
        Notifications.getInstance();

        // check add or update
        if (this.AddOrUpdate == 1) {
            addAndUpdate.setText("ADD");
            line1.grabFocus();
        } else if (this.AddOrUpdate == 2) {
            addAndUpdate.setText("UPDATE");
            loadAddress();
            addAndUpdate.grabFocus();
        }
    }

    // load address
    private void loadAddress() {

        try {

            ResultSet rs = MySQL.executeSearch("SELECT * FROM `employee_address` INNER JOIN `city` ON "
                    + "`employee_address`.`city_id` = `city`.`id` WHERE `employee_email` = '" + email + "';");

            if (rs.next()) {
                line1.setText(rs.getString("line1"));
                line2.setText(rs.getString("line2"));
                city.setSelectedItem(rs.getString("city.name"));
            }

        } catch (SQLException e) {
            e.printStackTrace();
            logger.log(Level.WARNING, "Error in the Sign In!", e);
        } catch (Exception e) {
            e.printStackTrace();
            logger.log(Level.WARNING, "Error in the Sign In!", e);
        }

    }

    // load countries
    private void loadCities() {

        try {

            ResultSet rs = MySQL.executeSearch("SELECT * FROM `city`;");

            Vector<String> vector = new Vector<>();
            vector.add("Select City");
            while (rs.next()) {
                vector.add(rs.getString("name"));
                cityMap.put(rs.getString("name"), rs.getInt("id"));

            }

            DefaultComboBoxModel dcbm = new DefaultComboBoxModel(vector);
            city.setModel(dcbm);

        } catch (SQLException e) {
            e.printStackTrace();
            logger.log(Level.WARNING, "Load Employee Addresses Error!", e);
        } catch (Exception e) {
            e.printStackTrace();
            logger.log(Level.WARNING, "Load Employee Addresses Error!", e);
        }

    }

    private void init() {
        // style the text fields and buttons
        line1.putClientProperty("JComponent.roundRect", true);
        line1.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "ex :- 19/2B");
        line1.putClientProperty(FlatClientProperties.STYLE, "margin:0, 20, 0, 20");
        line1.putClientProperty(FlatClientProperties.TEXT_FIELD_SHOW_CLEAR_BUTTON, true);

        line2.putClientProperty("JComponent.roundRect", true);
        line2.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "ex :- 2nd Lane");
        line2.putClientProperty(FlatClientProperties.STYLE, "margin:0, 20, 0, 20");
        line2.putClientProperty(FlatClientProperties.TEXT_FIELD_SHOW_CLEAR_BUTTON, true);

        city.putClientProperty("JComponent.roundRect", true);

        addAndUpdate.putClientProperty("JButton.buttonType", "roundRect");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        line1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        line2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        city = new javax.swing.JComboBox<>();
        addAndUpdate = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        emp_email = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Employee_Address");
        setFont(new java.awt.Font("JetBrains Mono", 0, 8)); // NOI18N
        setUndecorated(true);
        setResizable(false);

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 229, 255), 5, true));

        jLabel1.setBackground(new java.awt.Color(121, 203, 96));
        jLabel1.setFont(new java.awt.Font("Retro Signed", 0, 38)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("EMPLOYEE ADDRESS");
        jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 229, 255), 3, true));
        jLabel1.setOpaque(true);

        jPanel2.setBackground(new java.awt.Color(215, 249, 204));
        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(121, 203, 96), 3, true));

        line1.setFont(new java.awt.Font("JetBrains Mono SemiBold", 1, 16)); // NOI18N
        line1.setForeground(new java.awt.Color(0, 0, 0));

        jLabel4.setFont(new java.awt.Font("JetBrains Mono ExtraBold", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText(" Address Line 2");

        line2.setFont(new java.awt.Font("JetBrains Mono SemiBold", 1, 16)); // NOI18N
        line2.setForeground(new java.awt.Color(0, 0, 0));

        jLabel5.setFont(new java.awt.Font("JetBrains Mono ExtraBold", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText(" City");

        city.setFont(new java.awt.Font("JetBrains Mono SemiBold", 1, 16)); // NOI18N
        city.setForeground(new java.awt.Color(0, 0, 0));

        addAndUpdate.setFont(new java.awt.Font("JetBrains Mono ExtraBold", 1, 26)); // NOI18N
        addAndUpdate.setForeground(new java.awt.Color(0, 0, 0));
        addAndUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addAndUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAndUpdateActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("JetBrains Mono ExtraBold", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText(" Address Line 1");

        jPanel7.setBackground(new java.awt.Color(204, 229, 255));

        jLabel3.setFont(new java.awt.Font("JetBrains Mono ExtraBold", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText(" Employee Email :-");

        emp_email.setFont(new java.awt.Font("JetBrains Mono ExtraBold", 1, 18)); // NOI18N
        emp_email.setForeground(new java.awt.Color(0, 0, 0));
        emp_email.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        emp_email.setText("     ");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(0, 0, 0)
                .addComponent(emp_email, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emp_email, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(line1)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                    .addComponent(line2)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                    .addComponent(city, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addAndUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(line1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(line2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(addAndUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        jPanel3.setBackground(new java.awt.Color(121, 203, 96));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 26, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel4.setBackground(new java.awt.Color(121, 203, 96));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 563, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 27, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 26, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(0, 0, 0)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(10, 10, 10))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addAndUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAndUpdateActionPerformed

        // check add or update
        if (this.AddOrUpdate == 1) {

            // add address
            String Address_line1 = line1.getText();
            String Address_line2 = line2.getText();
            String cityValue = String.valueOf(city.getSelectedItem());

            if (Address_line1.isEmpty()) {
                Notifications.getInstance().show(Notifications.Type.ERROR, Notifications.Location.TOP_RIGHT, 3500l, "Please enter the Address Line 1!");
            } else if (Address_line2.isEmpty()) {
                Notifications.getInstance().show(Notifications.Type.ERROR, Notifications.Location.TOP_RIGHT, 3500l, "Please enter the Address Line 2!");
            } else if (cityValue.equals("Select City")) {
                Notifications.getInstance().show(Notifications.Type.ERROR, Notifications.Location.TOP_RIGHT, 3500l, "Please select a City!");
            } else {

                int cityId = cityMap.get(cityValue);

                try {

                    MySQL.executeIUD("INSERT INTO `employee_address` (`line1`,`line2`,`employee_email`,`city_id`) VALUES "
                            + "('" + Address_line1 + "', '" + Address_line2 + "', '" + email + "', '" + cityId + "');");

                    ResultSet rs = MySQL.executeSearch("SELECT * FROM `employee_address` INNER JOIN `city` ON "
                            + "`employee_address`.`city_id` = `city`.`id` WHERE `employee_email` = '" + email + "';");

                    if (rs.next()) {

                        line1.setText(rs.getString("line1"));
                        line2.setText(rs.getString("line2"));
                        city.setSelectedItem(rs.getString("city.name"));
                        line1.setEnabled(false);
                        line2.setEnabled(false);
                        city.setEnabled(false);

                        Notifications.getInstance().show(Notifications.Type.SUCCESS, Notifications.Location.TOP_RIGHT, 3500l, "Employee Address added Successfully!");

                        // Close this frames, re-enable the parent window and visible the home
                        if (parentWindow != null) {
                            parentWindow.setEnabled(true);
                        }

                        if (registerPanel != null) {
                            registerPanel.resetField();
                            registerPanel.loadProfiles();
                        }

                        this.dispose();

                    }

                } catch (SQLException e) {
                    e.printStackTrace();
                    logger.log(Level.WARNING, "Error in the Employee Address!", e);
                } catch (Exception e) {
                    e.printStackTrace();
                    logger.log(Level.WARNING, "Error in the Employee Address!", e);
                }

            }

        } else if (this.AddOrUpdate == 2) {

            // add address
            String Address_line1 = line1.getText();
            String Address_line2 = line2.getText();
            String cityValue = String.valueOf(city.getSelectedItem());

            if (Address_line1.isEmpty()) {
                Notifications.getInstance().show(Notifications.Type.ERROR, Notifications.Location.TOP_RIGHT, 3500l, "Please enter the Address Line 1!");
            } else if (Address_line2.isEmpty()) {
                Notifications.getInstance().show(Notifications.Type.ERROR, Notifications.Location.TOP_RIGHT, 3500l, "Please enter the Address Line 2!");
            } else if (cityValue.equals("Select City")) {
                Notifications.getInstance().show(Notifications.Type.ERROR, Notifications.Location.TOP_RIGHT, 3500l, "Please select a City!");
            } else {

                int cityId = cityMap.get(cityValue);

                try {

                    MySQL.executeIUD("UPDATE `employee_address` SET `line1` = '" + Address_line1 + "', `line2` = '" + Address_line2 + "', "
                            + "`city_id` = '" + cityId + "' WHERE `employee_email` = '" + email + "';");

                    ResultSet rs = MySQL.executeSearch("SELECT * FROM `employee_address` INNER JOIN `city` ON "
                            + "`employee_address`.`city_id` = `city`.`id` WHERE `employee_email` = '" + email + "';");

                    if (rs.next()) {

                        line1.setText(rs.getString("line1"));
                        line2.setText(rs.getString("line2"));
                        city.setSelectedItem(rs.getString("city.name"));
                        line1.setEnabled(false);
                        line2.setEnabled(false);
                        city.setEnabled(false);

                        Notifications.getInstance().show(Notifications.Type.SUCCESS, Notifications.Location.TOP_RIGHT, 3500l, "Employee Address updated Successfully!");

                        // Close this frame and re-enable the parent window
                        if (parentWindow != null) {
                            parentWindow.setEnabled(true);
                        }

                        if (registerPanel != null) {
                            registerPanel.resetField();
                            registerPanel.loadProfiles();
                        }

                        this.dispose();

                    }

                } catch (SQLException e) {
                    e.printStackTrace();
                    logger.log(Level.WARNING, "Error in the Employee Address!", e);
                } catch (Exception e) {
                    e.printStackTrace();
                    logger.log(Level.WARNING, "Error in the Employee Address!", e);
                }

            }

        }

    }//GEN-LAST:event_addAndUpdateActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAndUpdate;
    private javax.swing.JComboBox<String> city;
    private javax.swing.JLabel emp_email;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JTextField line1;
    private javax.swing.JTextField line2;
    // End of variables declaration//GEN-END:variables
}
